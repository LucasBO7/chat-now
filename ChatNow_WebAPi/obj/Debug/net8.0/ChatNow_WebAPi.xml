<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ChatNow_WebAPi</name>
    </assembly>
    <members>
        <member name="M:ChatNow_WebAPi.Controllers.LoginController.Post(ChatNow_WebAPi.ViewModels.UserLoginEmailDto)">
            <summary>
            Usa o JWT Bearer Authentication para Logar com Email em uma conta User existente no banco
            </summary>
            <param name="insertedUser">Objeto do tipo UserLoginEmailDto (Email, Password)</param>
            <returns>TokenJWT/NotFound</returns>
        </member>
        <member name="M:ChatNow_WebAPi.Controllers.LoginController.LoginWithGoogle(ChatNow_WebAPi.ViewModels.UserGoogleDto)">
            <summary>
            Usa JWT Bearer para logar-se em uma conta existente no banco com o google
            </summary>
            <param name="insertedUser"></param>
            <returns>TokenJWT/NotFound</returns>
        </member>
        <member name="M:ChatNow_WebAPi.Controllers.UserController.Post(ChatNow_WebAPi.Domains.User)">
            <summary>
            Cadastra um novo User no Banco de Dados
            </summary>
            <param name="insertedUser">Objeto do tipo User</param>
            <returns>OK(Objeto User) or BADREQUEST</returns>
        </member>
        <member name="M:ChatNow_WebAPi.Controllers.UserController.PostWithGoogle(ChatNow_WebAPi.ViewModels.UserGoogleDto)">
            <summary>
            Cadastra um novo User pelo GoogleId dele no Banco de Dados
            </summary>
            <param name="insertedUser">Objeto do tipo UserGoogleDto(Email, GoogleId)</param>
            <returns>OK/BadRequest</returns>
        </member>
        <member name="M:ChatNow_WebAPi.Controllers.UserController.GetAll">
            <summary>
            Lista todos os usu√°rios salvos no Banco de Dados
            </summary>
            <returns>Lista de Users/BadRequest</returns>
        </member>
        <member name="M:ChatNow_WebAPi.Interfaces.IUserRepository.Register(ChatNow_WebAPi.Domains.User)">
            <summary>
            Registers a new User in Db
            </summary>
            <param name="newUser">Object tyoe User</param>
            <returns>NULL or Object User</returns>
        </member>
        <member name="M:ChatNow_WebAPi.Interfaces.IUserRepository.RegisterWithGoogle(ChatNow_WebAPi.ViewModels.UserGoogleDto)">
            <summary>
            Registers a new User in Db with Google Login
            </summary>
            <param name="newUser">Object User</param>
            <returns>NULL or Object User</returns>
        </member>
        <member name="M:ChatNow_WebAPi.Interfaces.IUserRepository.SearchForEmailAndPassword(System.String,System.String)">
            <summary>
            Searches an User in Db
            </summary>
            <param name="email">email inserted</param>
            <param name="password">password inserted</param>
            <returns>NULL or Object User</returns>
        </member>
        <member name="M:ChatNow_WebAPi.Interfaces.IUserRepository.SearchByGoogleId(System.String)">
            <summary>
            Searches an User with Google in Db
            </summary>
            <param name="googleId">GoogleId inserted</param>
            <returns>NULL or Object User</returns>
        </member>
        <member name="T:ChatNow_WebAPi.Migrations.InitialContext">
            <inheritdoc />
        </member>
        <member name="M:ChatNow_WebAPi.Migrations.InitialContext.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:ChatNow_WebAPi.Migrations.InitialContext.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:ChatNow_WebAPi.Migrations.InitialContext.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:ChatNow_WebAPi.Migrations.ArrumadoDataannotationConversation">
            <inheritdoc />
        </member>
        <member name="M:ChatNow_WebAPi.Migrations.ArrumadoDataannotationConversation.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:ChatNow_WebAPi.Migrations.ArrumadoDataannotationConversation.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:ChatNow_WebAPi.Migrations.ArrumadoDataannotationConversation.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="M:ChatNow_WebAPi.Repositories.UserRepository.Register(ChatNow_WebAPi.Domains.User)">
            <summary>
            Registers a new User in Db with Email or GoogleId
            </summary>
            <param name="newUser">Object of type User</param>
            <returns>NULL or User Object</returns>
        </member>
        <member name="M:ChatNow_WebAPi.Repositories.UserRepository.SearchForEmailAndPassword(System.String,System.String)">
            <summary>
            Searches an existent user by Email and Password
            </summary>
            <param name="email">Email inserted</param>
            <param name="password">Password inserted</param>
            <returns>NULL or User Object</returns>
        </member>
        <member name="M:ChatNow_WebAPi.Repositories.UserRepository.SearchByGoogleId(System.String)">
            <summary>
            Searches an User by his GoogleId
            </summary>
            <param name="googleId">GoogleId inserted</param>
            <returns>NULL or User Object</returns>
        </member>
        <member name="M:ChatNow_WebAPi.Utils.Criptografia.GenerateHash(System.String)">
            <summary>
            Generate an Hash based on the inserted password
            </summary>
            <param name="password">Inserted password</param>
            <returns>hashed password</returns>
        </member>
        <member name="M:ChatNow_WebAPi.Utils.Criptografia.CompareHash(System.String,System.String)">
            <summary>
            Verifies if inserted password's hash is equals of db's hashed password
            </summary>
            <param name="insertedHashPassword">Password inserted by User</param>
            <param name="dbHashPassword">Password saved in db</param>
            <returns></returns>
        </member>
    </members>
</doc>
